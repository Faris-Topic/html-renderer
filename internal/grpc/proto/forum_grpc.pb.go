// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: forum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForumRendererClient is the client API for ForumRenderer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumRendererClient interface {
	GetHomePage(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HTMLResponse, error)
	GetNewPostPage(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HTMLResponse, error)
	CreateNewPost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*HTMLResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*HTMLResponse, error)
}

type forumRendererClient struct {
	cc grpc.ClientConnInterface
}

func NewForumRendererClient(cc grpc.ClientConnInterface) ForumRendererClient {
	return &forumRendererClient{cc}
}

func (c *forumRendererClient) GetHomePage(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HTMLResponse, error) {
	out := new(HTMLResponse)
	err := c.cc.Invoke(ctx, "/example.forum_rendering.proto.ForumRenderer/GetHomePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumRendererClient) GetNewPostPage(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HTMLResponse, error) {
	out := new(HTMLResponse)
	err := c.cc.Invoke(ctx, "/example.forum_rendering.proto.ForumRenderer/GetNewPostPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumRendererClient) CreateNewPost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*HTMLResponse, error) {
	out := new(HTMLResponse)
	err := c.cc.Invoke(ctx, "/example.forum_rendering.proto.ForumRenderer/CreateNewPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumRendererClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*HTMLResponse, error) {
	out := new(HTMLResponse)
	err := c.cc.Invoke(ctx, "/example.forum_rendering.proto.ForumRenderer/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumRendererServer is the server API for ForumRenderer service.
// All implementations must embed UnimplementedForumRendererServer
// for forward compatibility
type ForumRendererServer interface {
	GetHomePage(context.Context, *EmptyRequest) (*HTMLResponse, error)
	GetNewPostPage(context.Context, *EmptyRequest) (*HTMLResponse, error)
	CreateNewPost(context.Context, *CreatePostRequest) (*HTMLResponse, error)
	GetPost(context.Context, *GetPostRequest) (*HTMLResponse, error)
	mustEmbedUnimplementedForumRendererServer()
}

// UnimplementedForumRendererServer must be embedded to have forward compatible implementations.
type UnimplementedForumRendererServer struct {
}

func (UnimplementedForumRendererServer) GetHomePage(context.Context, *EmptyRequest) (*HTMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomePage not implemented")
}
func (UnimplementedForumRendererServer) GetNewPostPage(context.Context, *EmptyRequest) (*HTMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewPostPage not implemented")
}
func (UnimplementedForumRendererServer) CreateNewPost(context.Context, *CreatePostRequest) (*HTMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewPost not implemented")
}
func (UnimplementedForumRendererServer) GetPost(context.Context, *GetPostRequest) (*HTMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedForumRendererServer) mustEmbedUnimplementedForumRendererServer() {}

// UnsafeForumRendererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumRendererServer will
// result in compilation errors.
type UnsafeForumRendererServer interface {
	mustEmbedUnimplementedForumRendererServer()
}

func RegisterForumRendererServer(s grpc.ServiceRegistrar, srv ForumRendererServer) {
	s.RegisterService(&ForumRenderer_ServiceDesc, srv)
}

func _ForumRenderer_GetHomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumRendererServer).GetHomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.forum_rendering.proto.ForumRenderer/GetHomePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumRendererServer).GetHomePage(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumRenderer_GetNewPostPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumRendererServer).GetNewPostPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.forum_rendering.proto.ForumRenderer/GetNewPostPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumRendererServer).GetNewPostPage(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumRenderer_CreateNewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumRendererServer).CreateNewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.forum_rendering.proto.ForumRenderer/CreateNewPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumRendererServer).CreateNewPost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumRenderer_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumRendererServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.forum_rendering.proto.ForumRenderer/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumRendererServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForumRenderer_ServiceDesc is the grpc.ServiceDesc for ForumRenderer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForumRenderer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.forum_rendering.proto.ForumRenderer",
	HandlerType: (*ForumRendererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHomePage",
			Handler:    _ForumRenderer_GetHomePage_Handler,
		},
		{
			MethodName: "GetNewPostPage",
			Handler:    _ForumRenderer_GetNewPostPage_Handler,
		},
		{
			MethodName: "CreateNewPost",
			Handler:    _ForumRenderer_CreateNewPost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _ForumRenderer_GetPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forum.proto",
}
